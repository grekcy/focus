// source: sample_v1alpha1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
goog.exportSymbol('proto.api.sample.v1alpha1.TestTypes', null, global);
goog.exportSymbol('proto.api.sample.v1alpha1.TestTypes.EnumTest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.sample.v1alpha1.TestTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.sample.v1alpha1.TestTypes.repeatedFields_, null);
};
goog.inherits(proto.api.sample.v1alpha1.TestTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.sample.v1alpha1.TestTypes.displayName = 'proto.api.sample.v1alpha1.TestTypes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.sample.v1alpha1.TestTypes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.sample.v1alpha1.TestTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.sample.v1alpha1.TestTypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.sample.v1alpha1.TestTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    enumValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    releatedValueList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    mapValueMap: (f = msg.getMapValueMap()) ? f.toObject(includeInstance, undefined) : [],
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    stringValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bytesValue: msg.getBytesValue_asB64(),
    int32Value: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sint32Value: jspb.Message.getFieldWithDefault(msg, 8, 0),
    uint32Value: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fixed32Value: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sfixed32Value: jspb.Message.getFieldWithDefault(msg, 11, 0),
    int64Value: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sint64Value: jspb.Message.getFieldWithDefault(msg, 13, 0),
    uint64Value: jspb.Message.getFieldWithDefault(msg, 14, 0),
    fixed64Value: jspb.Message.getFieldWithDefault(msg, 15, 0),
    sfixed64Value: jspb.Message.getFieldWithDefault(msg, 16, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.sample.v1alpha1.TestTypes}
 */
proto.api.sample.v1alpha1.TestTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.sample.v1alpha1.TestTypes;
  return proto.api.sample.v1alpha1.TestTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.sample.v1alpha1.TestTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.sample.v1alpha1.TestTypes}
 */
proto.api.sample.v1alpha1.TestTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.sample.v1alpha1.TestTypes.EnumTest} */ (reader.readEnum());
      msg.setEnumValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addReleatedValue(value);
      break;
    case 3:
      var value = msg.getMapValueMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Value(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSint32Value(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUint32Value(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFixed32Value(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setSfixed32Value(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Value(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSint64Value(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64Value(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFixed64Value(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSfixed64Value(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.sample.v1alpha1.TestTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.sample.v1alpha1.TestTypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.sample.v1alpha1.TestTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnumValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReleatedValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMapValueMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBoolValue();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStringValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBytesValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getInt32Value();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSint32Value();
  if (f !== 0) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = message.getUint32Value();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFixed32Value();
  if (f !== 0) {
    writer.writeFixed32(
      10,
      f
    );
  }
  f = message.getSfixed32Value();
  if (f !== 0) {
    writer.writeSfixed32(
      11,
      f
    );
  }
  f = message.getInt64Value();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getSint64Value();
  if (f !== 0) {
    writer.writeSint64(
      13,
      f
    );
  }
  f = message.getUint64Value();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getFixed64Value();
  if (f !== 0) {
    writer.writeFixed64(
      15,
      f
    );
  }
  f = message.getSfixed64Value();
  if (f !== 0) {
    writer.writeSfixed64(
      16,
      f
    );
  }
  f = message.getFloatValue();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getDoubleValue();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.api.sample.v1alpha1.TestTypes.EnumTest = {
  V0: 0,
  V1: 1,
  V2: 2
};

/**
 * optional EnumTest enum_value = 1;
 * @return {!proto.api.sample.v1alpha1.TestTypes.EnumTest}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getEnumValue = function() {
  return /** @type {!proto.api.sample.v1alpha1.TestTypes.EnumTest} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.sample.v1alpha1.TestTypes.EnumTest} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setEnumValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string releated_value = 2;
 * @return {!Array<string>}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getReleatedValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setReleatedValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.addReleatedValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.clearReleatedValueList = function() {
  return this.setReleatedValueList([]);
};


/**
 * map<string, string> map_value = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getMapValueMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.clearMapValueMap = function() {
  this.getMapValueMap().clear();
  return this;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setBoolValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string string_value = 5;
 * @return {string}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setStringValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes bytes_value = 6;
 * @return {string}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getBytesValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bytes_value = 6;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {!Uint8Array}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getBytesValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setBytesValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int32 int32_value = 7;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getInt32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setInt32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint32 sint32_value = 8;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getSint32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setSint32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 uint32_value = 9;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getUint32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setUint32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed32 fixed32_value = 10;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getFixed32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setFixed32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sfixed32 sfixed32_value = 11;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getSfixed32Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setSfixed32Value = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 int64_value = 12;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getInt64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setInt64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional sint64 sint64_value = 13;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getSint64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setSint64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint64 uint64_value = 14;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getUint64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setUint64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional fixed64 fixed64_value = 15;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getFixed64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setFixed64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional sfixed64 sfixed64_value = 16;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getSfixed64Value = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setSfixed64Value = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional float float_value = 17;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setFloatValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double double_value = 18;
 * @return {number}
 */
proto.api.sample.v1alpha1.TestTypes.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.api.sample.v1alpha1.TestTypes} returns this
 */
proto.api.sample.v1alpha1.TestTypes.prototype.setDoubleValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


goog.object.extend(exports, proto.api.sample.v1alpha1);
