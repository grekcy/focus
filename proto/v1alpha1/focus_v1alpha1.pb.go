// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: focus_v1alpha1.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatchCardReq_Field int32

const (
	PatchCardReq_OBJECTIVE      PatchCardReq_Field = 0
	PatchCardReq_COMPLETED_AT   PatchCardReq_Field = 1
	PatchCardReq_CONTENT        PatchCardReq_Field = 2
	PatchCardReq_PARENT_CARD_NO PatchCardReq_Field = 3
	PatchCardReq_LABEL          PatchCardReq_Field = 4
	PatchCardReq_DEFER_UNTIL    PatchCardReq_Field = 5
	PatchCardReq_DUE_DATE       PatchCardReq_Field = 6
	PatchCardReq_CARD_TYPE      PatchCardReq_Field = 7
)

// Enum value maps for PatchCardReq_Field.
var (
	PatchCardReq_Field_name = map[int32]string{
		0: "OBJECTIVE",
		1: "COMPLETED_AT",
		2: "CONTENT",
		3: "PARENT_CARD_NO",
		4: "LABEL",
		5: "DEFER_UNTIL",
		6: "DUE_DATE",
		7: "CARD_TYPE",
	}
	PatchCardReq_Field_value = map[string]int32{
		"OBJECTIVE":      0,
		"COMPLETED_AT":   1,
		"CONTENT":        2,
		"PARENT_CARD_NO": 3,
		"LABEL":          4,
		"DEFER_UNTIL":    5,
		"DUE_DATE":       6,
		"CARD_TYPE":      7,
	}
)

func (x PatchCardReq_Field) Enum() *PatchCardReq_Field {
	p := new(PatchCardReq_Field)
	*p = x
	return p
}

func (x PatchCardReq_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchCardReq_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_focus_v1alpha1_proto_enumTypes[0].Descriptor()
}

func (PatchCardReq_Field) Type() protoreflect.EnumType {
	return &file_focus_v1alpha1_proto_enumTypes[0]
}

func (x PatchCardReq_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchCardReq_Field.Descriptor instead.
func (PatchCardReq_Field) EnumDescriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{9, 0}
}

type GoogleLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential string `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	ClientId   string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Extra      string `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GoogleLoginReq) Reset() {
	*x = GoogleLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleLoginReq) ProtoMessage() {}

func (x *GoogleLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleLoginReq.ProtoReflect.Descriptor instead.
func (*GoogleLoginReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{0}
}

func (x *GoogleLoginReq) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *GoogleLoginReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GoogleLoginReq) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid   string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"` // uuid
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // uuid
	CardNo           uint64                 `protobuf:"varint,2,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	ParentCardNo     *uint64                `protobuf:"varint,3,opt,name=parent_card_no,json=parentCardNo,proto3,oneof" json:"parent_card_no,omitempty"`
	Depth            uint32                 `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeferUntil       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=defer_until,json=deferUntil,proto3,oneof" json:"defer_until,omitempty"`
	DueDate          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=due_date,json=dueDate,proto3,oneof" json:"due_date,omitempty"`
	CompletedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	CreatorId        uint64                 `protobuf:"varint,10,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	ResponsibilityId *uint64                `protobuf:"varint,11,opt,name=responsibility_id,json=responsibilityId,proto3,oneof" json:"responsibility_id,omitempty"`
	CardType         string                 `protobuf:"bytes,12,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	Status           string                 `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	Objective        string                 `protobuf:"bytes,14,opt,name=objective,proto3" json:"objective,omitempty"`
	Content          string                 `protobuf:"bytes,15,opt,name=content,proto3" json:"content,omitempty"`
	Labels           []uint64               `protobuf:"varint,16,rep,packed,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{2}
}

func (x *Card) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Card) GetCardNo() uint64 {
	if x != nil {
		return x.CardNo
	}
	return 0
}

func (x *Card) GetParentCardNo() uint64 {
	if x != nil && x.ParentCardNo != nil {
		return *x.ParentCardNo
	}
	return 0
}

func (x *Card) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Card) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Card) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Card) GetDeferUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DeferUntil
	}
	return nil
}

func (x *Card) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Card) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *Card) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Card) GetResponsibilityId() uint64 {
	if x != nil && x.ResponsibilityId != nil {
		return *x.ResponsibilityId
	}
	return 0
}

func (x *Card) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *Card) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Card) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

func (x *Card) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Card) GetLabels() []uint64 {
	if x != nil {
		return x.Labels
	}
	return nil
}

type AddCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objective string  `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	AddAfter  *uint64 `protobuf:"varint,2,opt,name=add_after,json=addAfter,proto3,oneof" json:"add_after,omitempty"`
}

func (x *AddCardReq) Reset() {
	*x = AddCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardReq) ProtoMessage() {}

func (x *AddCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardReq.ProtoReflect.Descriptor instead.
func (*AddCardReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{3}
}

func (x *AddCardReq) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

func (x *AddCardReq) GetAddAfter() uint64 {
	if x != nil && x.AddAfter != nil {
		return *x.AddAfter
	}
	return 0
}

type ListCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCond        *Card `protobuf:"bytes,1,opt,name=start_cond,json=startCond,proto3" json:"start_cond,omitempty"`
	Cond             *Card `protobuf:"bytes,2,opt,name=cond,proto3" json:"cond,omitempty"`
	ExcludeCompleted bool  `protobuf:"varint,3,opt,name=exclude_completed,json=excludeCompleted,proto3" json:"exclude_completed,omitempty"`
	IncludeDeferred  bool  `protobuf:"varint,4,opt,name=include_deferred,json=includeDeferred,proto3" json:"include_deferred,omitempty"`
}

func (x *ListCardReq) Reset() {
	*x = ListCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardReq) ProtoMessage() {}

func (x *ListCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardReq.ProtoReflect.Descriptor instead.
func (*ListCardReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{4}
}

func (x *ListCardReq) GetStartCond() *Card {
	if x != nil {
		return x.StartCond
	}
	return nil
}

func (x *ListCardReq) GetCond() *Card {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *ListCardReq) GetExcludeCompleted() bool {
	if x != nil {
		return x.ExcludeCompleted
	}
	return false
}

func (x *ListCardReq) GetIncludeDeferred() bool {
	if x != nil {
		return x.IncludeDeferred
	}
	return false
}

type ListCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Card `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCardResp) Reset() {
	*x = ListCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCardResp) ProtoMessage() {}

func (x *ListCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCardResp.ProtoReflect.Descriptor instead.
func (*ListCardResp) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{5}
}

func (x *ListCardResp) GetItems() []*Card {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNos []uint64 `protobuf:"varint,1,rep,packed,name=card_nos,json=cardNos,proto3" json:"card_nos,omitempty"`
}

func (x *GetCardReq) Reset() {
	*x = GetCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardReq) ProtoMessage() {}

func (x *GetCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardReq.ProtoReflect.Descriptor instead.
func (*GetCardReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{6}
}

func (x *GetCardReq) GetCardNos() []uint64 {
	if x != nil {
		return x.CardNos
	}
	return nil
}

type GetCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[uint64]*Card `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCardResp) Reset() {
	*x = GetCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardResp) ProtoMessage() {}

func (x *GetCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardResp.ProtoReflect.Descriptor instead.
func (*GetCardResp) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{7}
}

func (x *GetCardResp) GetItems() map[uint64]*Card {
	if x != nil {
		return x.Items
	}
	return nil
}

type RankCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNo       uint64 `protobuf:"varint,1,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	TargetCardNo uint64 `protobuf:"varint,2,opt,name=target_card_no,json=targetCardNo,proto3" json:"target_card_no,omitempty"`
}

func (x *RankCardReq) Reset() {
	*x = RankCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankCardReq) ProtoMessage() {}

func (x *RankCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankCardReq.ProtoReflect.Descriptor instead.
func (*RankCardReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{8}
}

func (x *RankCardReq) GetCardNo() uint64 {
	if x != nil {
		return x.CardNo
	}
	return 0
}

func (x *RankCardReq) GetTargetCardNo() uint64 {
	if x != nil {
		return x.TargetCardNo
	}
	return 0
}

type PatchCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []PatchCardReq_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=api.v1alpha1.PatchCardReq_Field" json:"fields,omitempty"`
	Card   *Card                `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PatchCardReq) Reset() {
	*x = PatchCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCardReq) ProtoMessage() {}

func (x *PatchCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCardReq.ProtoReflect.Descriptor instead.
func (*PatchCardReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{9}
}

func (x *PatchCardReq) GetFields() []PatchCardReq_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchCardReq) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid         string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"` // uuid
	WorkspaceId uint64                 `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Label       string                 `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Color       string                 `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{10}
}

func (x *Label) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Label) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Label) GetWorkspaceId() uint64 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *Label) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Label) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type CardProgressSummaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Done  uint64 `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *CardProgressSummaryResp) Reset() {
	*x = CardProgressSummaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardProgressSummaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardProgressSummaryResp) ProtoMessage() {}

func (x *CardProgressSummaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardProgressSummaryResp.ProtoReflect.Descriptor instead.
func (*CardProgressSummaryResp) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{11}
}

func (x *CardProgressSummaryResp) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CardProgressSummaryResp) GetDone() uint64 {
	if x != nil {
		return x.Done
	}
	return 0
}

type ListLabelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ListLabelsReq) Reset() {
	*x = ListLabelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsReq) ProtoMessage() {}

func (x *ListLabelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsReq.ProtoReflect.Descriptor instead.
func (*ListLabelsReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{12}
}

func (x *ListLabelsReq) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListLabelsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ListLabelsResp) Reset() {
	*x = ListLabelsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsResp) ProtoMessage() {}

func (x *ListLabelsResp) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsResp.ProtoReflect.Descriptor instead.
func (*ListLabelsResp) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{13}
}

func (x *ListLabelsResp) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ListChallengesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListChallengesReq) Reset() {
	*x = ListChallengesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChallengesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChallengesReq) ProtoMessage() {}

func (x *ListChallengesReq) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChallengesReq.ProtoReflect.Descriptor instead.
func (*ListChallengesReq) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{14}
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"` // card information
	// TODO 굳이 이렇게 할 필요 있을까? cardProgressSummary()로 하면 될텐데..
	// progress
	TotalCards     uint64 `protobuf:"varint,2,opt,name=total_cards,json=totalCards,proto3" json:"total_cards,omitempty"`
	CompletedCards uint64 `protobuf:"varint,3,opt,name=completed_cards,json=completedCards,proto3" json:"completed_cards,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{15}
}

func (x *Challenge) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *Challenge) GetTotalCards() uint64 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *Challenge) GetCompletedCards() uint64 {
	if x != nil {
		return x.CompletedCards
	}
	return 0
}

type ListChallengesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Challenge `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListChallengesResp) Reset() {
	*x = ListChallengesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_focus_v1alpha1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChallengesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChallengesResp) ProtoMessage() {}

func (x *ListChallengesResp) ProtoReflect() protoreflect.Message {
	mi := &file_focus_v1alpha1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChallengesResp.ProtoReflect.Descriptor instead.
func (*ListChallengesResp) Descriptor() ([]byte, []int) {
	return file_focus_v1alpha1_proto_rawDescGZIP(), []int{16}
}

func (x *ListChallengesResp) GetItems() []*Challenge {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_focus_v1alpha1_proto protoreflect.FileDescriptor

var file_focus_v1alpha1_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x63, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x52, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x05, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x04, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x27,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x4c, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4c, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22,
	0xf5, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x22, 0xd5, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x43, 0x0a, 0x17, 0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x3d, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x13, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x7d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xae, 0x0a, 0x0a, 0x05, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x6b, 0x63, 0x79, 0x2f, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_focus_v1alpha1_proto_rawDescOnce sync.Once
	file_focus_v1alpha1_proto_rawDescData = file_focus_v1alpha1_proto_rawDesc
)

func file_focus_v1alpha1_proto_rawDescGZIP() []byte {
	file_focus_v1alpha1_proto_rawDescOnce.Do(func() {
		file_focus_v1alpha1_proto_rawDescData = protoimpl.X.CompressGZIP(file_focus_v1alpha1_proto_rawDescData)
	})
	return file_focus_v1alpha1_proto_rawDescData
}

var file_focus_v1alpha1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_focus_v1alpha1_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_focus_v1alpha1_proto_goTypes = []interface{}{
	(PatchCardReq_Field)(0),         // 0: api.v1alpha1.PatchCardReq.Field
	(*GoogleLoginReq)(nil),          // 1: api.v1alpha1.GoogleLoginReq
	(*User)(nil),                    // 2: api.v1alpha1.User
	(*Card)(nil),                    // 3: api.v1alpha1.Card
	(*AddCardReq)(nil),              // 4: api.v1alpha1.AddCardReq
	(*ListCardReq)(nil),             // 5: api.v1alpha1.ListCardReq
	(*ListCardResp)(nil),            // 6: api.v1alpha1.ListCardResp
	(*GetCardReq)(nil),              // 7: api.v1alpha1.GetCardReq
	(*GetCardResp)(nil),             // 8: api.v1alpha1.GetCardResp
	(*RankCardReq)(nil),             // 9: api.v1alpha1.RankCardReq
	(*PatchCardReq)(nil),            // 10: api.v1alpha1.PatchCardReq
	(*Label)(nil),                   // 11: api.v1alpha1.Label
	(*CardProgressSummaryResp)(nil), // 12: api.v1alpha1.CardProgressSummaryResp
	(*ListLabelsReq)(nil),           // 13: api.v1alpha1.ListLabelsReq
	(*ListLabelsResp)(nil),          // 14: api.v1alpha1.ListLabelsResp
	(*ListChallengesReq)(nil),       // 15: api.v1alpha1.ListChallengesReq
	(*Challenge)(nil),               // 16: api.v1alpha1.Challenge
	(*ListChallengesResp)(nil),      // 17: api.v1alpha1.ListChallengesResp
	nil,                             // 18: api.v1alpha1.GetCardResp.ItemsEntry
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 20: google.protobuf.Empty
	(*wrapperspb.UInt64Value)(nil),  // 21: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),  // 22: google.protobuf.StringValue
}
var file_focus_v1alpha1_proto_depIdxs = []int32{
	19, // 0: api.v1alpha1.Card.created_at:type_name -> google.protobuf.Timestamp
	19, // 1: api.v1alpha1.Card.updated_at:type_name -> google.protobuf.Timestamp
	19, // 2: api.v1alpha1.Card.defer_until:type_name -> google.protobuf.Timestamp
	19, // 3: api.v1alpha1.Card.due_date:type_name -> google.protobuf.Timestamp
	19, // 4: api.v1alpha1.Card.completed_at:type_name -> google.protobuf.Timestamp
	3,  // 5: api.v1alpha1.ListCardReq.start_cond:type_name -> api.v1alpha1.Card
	3,  // 6: api.v1alpha1.ListCardReq.cond:type_name -> api.v1alpha1.Card
	3,  // 7: api.v1alpha1.ListCardResp.items:type_name -> api.v1alpha1.Card
	18, // 8: api.v1alpha1.GetCardResp.items:type_name -> api.v1alpha1.GetCardResp.ItemsEntry
	0,  // 9: api.v1alpha1.PatchCardReq.fields:type_name -> api.v1alpha1.PatchCardReq.Field
	3,  // 10: api.v1alpha1.PatchCardReq.card:type_name -> api.v1alpha1.Card
	19, // 11: api.v1alpha1.Label.created_at:type_name -> google.protobuf.Timestamp
	11, // 12: api.v1alpha1.ListLabelsResp.labels:type_name -> api.v1alpha1.Label
	3,  // 13: api.v1alpha1.Challenge.card:type_name -> api.v1alpha1.Card
	16, // 14: api.v1alpha1.ListChallengesResp.items:type_name -> api.v1alpha1.Challenge
	3,  // 15: api.v1alpha1.GetCardResp.ItemsEntry.value:type_name -> api.v1alpha1.Card
	20, // 16: api.v1alpha1.Focus.Version:input_type -> google.protobuf.Empty
	20, // 17: api.v1alpha1.Focus.VersionEx:input_type -> google.protobuf.Empty
	1,  // 18: api.v1alpha1.Focus.LoginWithGoogleOauth:input_type -> api.v1alpha1.GoogleLoginReq
	20, // 19: api.v1alpha1.Focus.GetProfile:input_type -> google.protobuf.Empty
	21, // 20: api.v1alpha1.Focus.GetUser:input_type -> google.protobuf.UInt64Value
	4,  // 21: api.v1alpha1.Focus.AddCard:input_type -> api.v1alpha1.AddCardReq
	5,  // 22: api.v1alpha1.Focus.ListCards:input_type -> api.v1alpha1.ListCardReq
	21, // 23: api.v1alpha1.Focus.GetCard:input_type -> google.protobuf.UInt64Value
	7,  // 24: api.v1alpha1.Focus.GetCards:input_type -> api.v1alpha1.GetCardReq
	21, // 25: api.v1alpha1.Focus.GetCardProgressSummary:input_type -> google.protobuf.UInt64Value
	10, // 26: api.v1alpha1.Focus.PatchCard:input_type -> api.v1alpha1.PatchCardReq
	9,  // 27: api.v1alpha1.Focus.RerankCard:input_type -> api.v1alpha1.RankCardReq
	21, // 28: api.v1alpha1.Focus.DeleteCard:input_type -> google.protobuf.UInt64Value
	11, // 29: api.v1alpha1.Focus.CreateLabel:input_type -> api.v1alpha1.Label
	13, // 30: api.v1alpha1.Focus.ListLabels:input_type -> api.v1alpha1.ListLabelsReq
	11, // 31: api.v1alpha1.Focus.UpdateLabel:input_type -> api.v1alpha1.Label
	21, // 32: api.v1alpha1.Focus.DeleteLabel:input_type -> google.protobuf.UInt64Value
	15, // 33: api.v1alpha1.Focus.ListChallenges:input_type -> api.v1alpha1.ListChallengesReq
	21, // 34: api.v1alpha1.Focus.GetChallenge:input_type -> google.protobuf.UInt64Value
	22, // 35: api.v1alpha1.Focus.Version:output_type -> google.protobuf.StringValue
	22, // 36: api.v1alpha1.Focus.VersionEx:output_type -> google.protobuf.StringValue
	22, // 37: api.v1alpha1.Focus.LoginWithGoogleOauth:output_type -> google.protobuf.StringValue
	2,  // 38: api.v1alpha1.Focus.GetProfile:output_type -> api.v1alpha1.User
	2,  // 39: api.v1alpha1.Focus.GetUser:output_type -> api.v1alpha1.User
	3,  // 40: api.v1alpha1.Focus.AddCard:output_type -> api.v1alpha1.Card
	6,  // 41: api.v1alpha1.Focus.ListCards:output_type -> api.v1alpha1.ListCardResp
	3,  // 42: api.v1alpha1.Focus.GetCard:output_type -> api.v1alpha1.Card
	8,  // 43: api.v1alpha1.Focus.GetCards:output_type -> api.v1alpha1.GetCardResp
	12, // 44: api.v1alpha1.Focus.GetCardProgressSummary:output_type -> api.v1alpha1.CardProgressSummaryResp
	3,  // 45: api.v1alpha1.Focus.PatchCard:output_type -> api.v1alpha1.Card
	20, // 46: api.v1alpha1.Focus.RerankCard:output_type -> google.protobuf.Empty
	20, // 47: api.v1alpha1.Focus.DeleteCard:output_type -> google.protobuf.Empty
	11, // 48: api.v1alpha1.Focus.CreateLabel:output_type -> api.v1alpha1.Label
	14, // 49: api.v1alpha1.Focus.ListLabels:output_type -> api.v1alpha1.ListLabelsResp
	11, // 50: api.v1alpha1.Focus.UpdateLabel:output_type -> api.v1alpha1.Label
	20, // 51: api.v1alpha1.Focus.DeleteLabel:output_type -> google.protobuf.Empty
	17, // 52: api.v1alpha1.Focus.ListChallenges:output_type -> api.v1alpha1.ListChallengesResp
	16, // 53: api.v1alpha1.Focus.GetChallenge:output_type -> api.v1alpha1.Challenge
	35, // [35:54] is the sub-list for method output_type
	16, // [16:35] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_focus_v1alpha1_proto_init() }
func file_focus_v1alpha1_proto_init() {
	if File_focus_v1alpha1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_focus_v1alpha1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardProgressSummaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChallengesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_focus_v1alpha1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChallengesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_focus_v1alpha1_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_focus_v1alpha1_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_focus_v1alpha1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_focus_v1alpha1_proto_goTypes,
		DependencyIndexes: file_focus_v1alpha1_proto_depIdxs,
		EnumInfos:         file_focus_v1alpha1_proto_enumTypes,
		MessageInfos:      file_focus_v1alpha1_proto_msgTypes,
	}.Build()
	File_focus_v1alpha1_proto = out.File
	file_focus_v1alpha1_proto_rawDesc = nil
	file_focus_v1alpha1_proto_goTypes = nil
	file_focus_v1alpha1_proto_depIdxs = nil
}
