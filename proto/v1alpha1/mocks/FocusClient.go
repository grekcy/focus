// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "focus/proto/v1alpha1"

	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// FocusClient is an autogenerated mock type for the FocusClient type
type FocusClient struct {
	mock.Mock
}

// AddCard provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) AddCard(ctx context.Context, in *v1alpha1.AddCardReq, opts ...grpc.CallOption) (*v1alpha1.Card, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.AddCardReq, ...grpc.CallOption) (*v1alpha1.Card, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.AddCardReq, ...grpc.CallOption) *v1alpha1.Card); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.AddCardReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLabel provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) CreateLabel(ctx context.Context, in *v1alpha1.Label, opts ...grpc.CallOption) (*v1alpha1.Label, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) (*v1alpha1.Label, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) *v1alpha1.Label); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCard provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) DeleteCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabel provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) DeleteLabel(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*v1alpha1.Card, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*v1alpha1.Card, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *v1alpha1.Card); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardProgressSummary provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetCardProgressSummary(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*v1alpha1.CardProgressSummaryResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CardProgressSummaryResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*v1alpha1.CardProgressSummaryResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *v1alpha1.CardProgressSummaryResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CardProgressSummaryResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetCards(ctx context.Context, in *v1alpha1.GetCardReq, opts ...grpc.CallOption) (*v1alpha1.GetCardResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.GetCardResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.GetCardReq, ...grpc.CallOption) (*v1alpha1.GetCardResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.GetCardReq, ...grpc.CallOption) *v1alpha1.GetCardResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.GetCardResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.GetCardReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChallenge provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetChallenge(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*v1alpha1.Challenge, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*v1alpha1.Challenge, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *v1alpha1.Challenge); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Challenge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*v1alpha1.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *v1alpha1.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) GetUser(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*v1alpha1.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) (*v1alpha1.User, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) *v1alpha1.User); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wrapperspb.UInt64Value, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCards provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) ListCards(ctx context.Context, in *v1alpha1.ListCardReq, opts ...grpc.CallOption) (*v1alpha1.ListCardResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.ListCardResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListCardReq, ...grpc.CallOption) (*v1alpha1.ListCardResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListCardReq, ...grpc.CallOption) *v1alpha1.ListCardResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ListCardResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ListCardReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChallenges provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) ListChallenges(ctx context.Context, in *v1alpha1.ListChallengesReq, opts ...grpc.CallOption) (*v1alpha1.ListChallengesResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.ListChallengesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListChallengesReq, ...grpc.CallOption) (*v1alpha1.ListChallengesResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListChallengesReq, ...grpc.CallOption) *v1alpha1.ListChallengesResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ListChallengesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ListChallengesReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLabels provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) ListLabels(ctx context.Context, in *v1alpha1.ListLabelsReq, opts ...grpc.CallOption) (*v1alpha1.ListLabelsResp, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.ListLabelsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListLabelsReq, ...grpc.CallOption) (*v1alpha1.ListLabelsResp, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ListLabelsReq, ...grpc.CallOption) *v1alpha1.ListLabelsResp); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ListLabelsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ListLabelsReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginWithGoogleOauth provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) LoginWithGoogleOauth(ctx context.Context, in *v1alpha1.GoogleLoginReq, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wrapperspb.StringValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.GoogleLoginReq, ...grpc.CallOption) (*wrapperspb.StringValue, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.GoogleLoginReq, ...grpc.CallOption) *wrapperspb.StringValue); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrapperspb.StringValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.GoogleLoginReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchCard provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) PatchCard(ctx context.Context, in *v1alpha1.PatchCardReq, opts ...grpc.CallOption) (*v1alpha1.Card, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PatchCardReq, ...grpc.CallOption) (*v1alpha1.Card, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PatchCardReq, ...grpc.CallOption) *v1alpha1.Card); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.PatchCardReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RerankCard provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) RerankCard(ctx context.Context, in *v1alpha1.RankCardReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.RankCardReq, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.RankCardReq, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.RankCardReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLabel provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) UpdateLabel(ctx context.Context, in *v1alpha1.Label, opts ...grpc.CallOption) (*v1alpha1.Label, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) (*v1alpha1.Label, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) *v1alpha1.Label); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Label, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wrapperspb.StringValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*wrapperspb.StringValue, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *wrapperspb.StringValue); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrapperspb.StringValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionEx provides a mock function with given fields: ctx, in, opts
func (_m *FocusClient) VersionEx(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wrapperspb.StringValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*wrapperspb.StringValue, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *wrapperspb.StringValue); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrapperspb.StringValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFocusClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewFocusClient creates a new instance of FocusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFocusClient(t mockConstructorTestingTNewFocusClient) *FocusClient {
	mock := &FocusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
