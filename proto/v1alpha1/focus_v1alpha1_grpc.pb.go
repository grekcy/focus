// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: focus_v1alpha1.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Focus_Version_FullMethodName                = "/api.v1alpha1.Focus/version"
	Focus_LoginWithGoogleOauth_FullMethodName   = "/api.v1alpha1.Focus/loginWithGoogleOauth"
	Focus_GetUser_FullMethodName                = "/api.v1alpha1.Focus/getUser"
	Focus_AddCard_FullMethodName                = "/api.v1alpha1.Focus/addCard"
	Focus_ListCards_FullMethodName              = "/api.v1alpha1.Focus/listCards"
	Focus_GetCard_FullMethodName                = "/api.v1alpha1.Focus/getCard"
	Focus_GetCards_FullMethodName               = "/api.v1alpha1.Focus/getCards"
	Focus_GetCardProgressSummary_FullMethodName = "/api.v1alpha1.Focus/getCardProgressSummary"
	Focus_PatchCard_FullMethodName              = "/api.v1alpha1.Focus/patchCard"
	Focus_RerankCard_FullMethodName             = "/api.v1alpha1.Focus/rerankCard"
	Focus_DeleteCard_FullMethodName             = "/api.v1alpha1.Focus/deleteCard"
	Focus_CreateLabel_FullMethodName            = "/api.v1alpha1.Focus/createLabel"
	Focus_ListLabels_FullMethodName             = "/api.v1alpha1.Focus/listLabels"
	Focus_UpdateLabel_FullMethodName            = "/api.v1alpha1.Focus/updateLabel"
	Focus_DeleteLabel_FullMethodName            = "/api.v1alpha1.Focus/deleteLabel"
	Focus_ListChallenges_FullMethodName         = "/api.v1alpha1.Focus/listChallenges"
	Focus_GetChallenge_FullMethodName           = "/api.v1alpha1.Focus/getChallenge"
)

// FocusClient is the client API for Focus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FocusClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// returns api key
	LoginWithGoogleOauth(ctx context.Context, in *GoogleLoginReq, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetUser(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*User, error)
	AddCard(ctx context.Context, in *AddCardReq, opts ...grpc.CallOption) (*Card, error)
	ListCards(ctx context.Context, in *ListCardReq, opts ...grpc.CallOption) (*ListCardResp, error)
	GetCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Card, error)
	GetCards(ctx context.Context, in *GetCardReq, opts ...grpc.CallOption) (*GetCardResp, error)
	GetCardProgressSummary(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*CardProgressSummaryResp, error)
	PatchCard(ctx context.Context, in *PatchCardReq, opts ...grpc.CallOption) (*Card, error)
	RerankCard(ctx context.Context, in *RankCardReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	ListLabels(ctx context.Context, in *ListLabelsReq, opts ...grpc.CallOption) (*ListLabelsResp, error)
	UpdateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error)
	DeleteLabel(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListChallenges(ctx context.Context, in *ListChallengesReq, opts ...grpc.CallOption) (*ListChallengesResp, error)
	GetChallenge(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Challenge, error)
}

type focusClient struct {
	cc grpc.ClientConnInterface
}

func NewFocusClient(cc grpc.ClientConnInterface) FocusClient {
	return &focusClient{cc}
}

func (c *focusClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, Focus_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) LoginWithGoogleOauth(ctx context.Context, in *GoogleLoginReq, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, Focus_LoginWithGoogleOauth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) GetUser(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Focus_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) AddCard(ctx context.Context, in *AddCardReq, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, Focus_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) ListCards(ctx context.Context, in *ListCardReq, opts ...grpc.CallOption) (*ListCardResp, error) {
	out := new(ListCardResp)
	err := c.cc.Invoke(ctx, Focus_ListCards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) GetCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, Focus_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) GetCards(ctx context.Context, in *GetCardReq, opts ...grpc.CallOption) (*GetCardResp, error) {
	out := new(GetCardResp)
	err := c.cc.Invoke(ctx, Focus_GetCards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) GetCardProgressSummary(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*CardProgressSummaryResp, error) {
	out := new(CardProgressSummaryResp)
	err := c.cc.Invoke(ctx, Focus_GetCardProgressSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) PatchCard(ctx context.Context, in *PatchCardReq, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, Focus_PatchCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) RerankCard(ctx context.Context, in *RankCardReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Focus_RerankCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) DeleteCard(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Focus_DeleteCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) CreateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, Focus_CreateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) ListLabels(ctx context.Context, in *ListLabelsReq, opts ...grpc.CallOption) (*ListLabelsResp, error) {
	out := new(ListLabelsResp)
	err := c.cc.Invoke(ctx, Focus_ListLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) UpdateLabel(ctx context.Context, in *Label, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, Focus_UpdateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) DeleteLabel(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Focus_DeleteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) ListChallenges(ctx context.Context, in *ListChallengesReq, opts ...grpc.CallOption) (*ListChallengesResp, error) {
	out := new(ListChallengesResp)
	err := c.cc.Invoke(ctx, Focus_ListChallenges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusClient) GetChallenge(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, Focus_GetChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FocusServer is the server API for Focus service.
// All implementations must embed UnimplementedFocusServer
// for forward compatibility
type FocusServer interface {
	Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	// returns api key
	LoginWithGoogleOauth(context.Context, *GoogleLoginReq) (*wrapperspb.StringValue, error)
	GetUser(context.Context, *wrapperspb.UInt64Value) (*User, error)
	AddCard(context.Context, *AddCardReq) (*Card, error)
	ListCards(context.Context, *ListCardReq) (*ListCardResp, error)
	GetCard(context.Context, *wrapperspb.UInt64Value) (*Card, error)
	GetCards(context.Context, *GetCardReq) (*GetCardResp, error)
	GetCardProgressSummary(context.Context, *wrapperspb.UInt64Value) (*CardProgressSummaryResp, error)
	PatchCard(context.Context, *PatchCardReq) (*Card, error)
	RerankCard(context.Context, *RankCardReq) (*emptypb.Empty, error)
	DeleteCard(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error)
	CreateLabel(context.Context, *Label) (*Label, error)
	ListLabels(context.Context, *ListLabelsReq) (*ListLabelsResp, error)
	UpdateLabel(context.Context, *Label) (*Label, error)
	DeleteLabel(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error)
	ListChallenges(context.Context, *ListChallengesReq) (*ListChallengesResp, error)
	GetChallenge(context.Context, *wrapperspb.UInt64Value) (*Challenge, error)
	mustEmbedUnimplementedFocusServer()
}

// UnimplementedFocusServer must be embedded to have forward compatible implementations.
type UnimplementedFocusServer struct {
}

func (UnimplementedFocusServer) Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedFocusServer) LoginWithGoogleOauth(context.Context, *GoogleLoginReq) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithGoogleOauth not implemented")
}
func (UnimplementedFocusServer) GetUser(context.Context, *wrapperspb.UInt64Value) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedFocusServer) AddCard(context.Context, *AddCardReq) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedFocusServer) ListCards(context.Context, *ListCardReq) (*ListCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}
func (UnimplementedFocusServer) GetCard(context.Context, *wrapperspb.UInt64Value) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedFocusServer) GetCards(context.Context, *GetCardReq) (*GetCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (UnimplementedFocusServer) GetCardProgressSummary(context.Context, *wrapperspb.UInt64Value) (*CardProgressSummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardProgressSummary not implemented")
}
func (UnimplementedFocusServer) PatchCard(context.Context, *PatchCardReq) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCard not implemented")
}
func (UnimplementedFocusServer) RerankCard(context.Context, *RankCardReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerankCard not implemented")
}
func (UnimplementedFocusServer) DeleteCard(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedFocusServer) CreateLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedFocusServer) ListLabels(context.Context, *ListLabelsReq) (*ListLabelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (UnimplementedFocusServer) UpdateLabel(context.Context, *Label) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}
func (UnimplementedFocusServer) DeleteLabel(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedFocusServer) ListChallenges(context.Context, *ListChallengesReq) (*ListChallengesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChallenges not implemented")
}
func (UnimplementedFocusServer) GetChallenge(context.Context, *wrapperspb.UInt64Value) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedFocusServer) mustEmbedUnimplementedFocusServer() {}

// UnsafeFocusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FocusServer will
// result in compilation errors.
type UnsafeFocusServer interface {
	mustEmbedUnimplementedFocusServer()
}

func RegisterFocusServer(s grpc.ServiceRegistrar, srv FocusServer) {
	s.RegisterService(&Focus_ServiceDesc, srv)
}

func _Focus_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_LoginWithGoogleOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).LoginWithGoogleOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_LoginWithGoogleOauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).LoginWithGoogleOauth(ctx, req.(*GoogleLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).GetUser(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).AddCard(ctx, req.(*AddCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_ListCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).ListCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_ListCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).ListCards(ctx, req.(*ListCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).GetCard(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_GetCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).GetCards(ctx, req.(*GetCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_GetCardProgressSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).GetCardProgressSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_GetCardProgressSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).GetCardProgressSummary(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_PatchCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).PatchCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_PatchCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).PatchCard(ctx, req.(*PatchCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_RerankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).RerankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_RerankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).RerankCard(ctx, req.(*RankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).DeleteCard(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_CreateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).CreateLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_ListLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).ListLabels(ctx, req.(*ListLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_UpdateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).UpdateLabel(ctx, req.(*Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_DeleteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).DeleteLabel(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_ListChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChallengesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).ListChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_ListChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).ListChallenges(ctx, req.(*ListChallengesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Focus_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Focus_GetChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusServer).GetChallenge(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

// Focus_ServiceDesc is the grpc.ServiceDesc for Focus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Focus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.Focus",
	HandlerType: (*FocusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "version",
			Handler:    _Focus_Version_Handler,
		},
		{
			MethodName: "loginWithGoogleOauth",
			Handler:    _Focus_LoginWithGoogleOauth_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Focus_GetUser_Handler,
		},
		{
			MethodName: "addCard",
			Handler:    _Focus_AddCard_Handler,
		},
		{
			MethodName: "listCards",
			Handler:    _Focus_ListCards_Handler,
		},
		{
			MethodName: "getCard",
			Handler:    _Focus_GetCard_Handler,
		},
		{
			MethodName: "getCards",
			Handler:    _Focus_GetCards_Handler,
		},
		{
			MethodName: "getCardProgressSummary",
			Handler:    _Focus_GetCardProgressSummary_Handler,
		},
		{
			MethodName: "patchCard",
			Handler:    _Focus_PatchCard_Handler,
		},
		{
			MethodName: "rerankCard",
			Handler:    _Focus_RerankCard_Handler,
		},
		{
			MethodName: "deleteCard",
			Handler:    _Focus_DeleteCard_Handler,
		},
		{
			MethodName: "createLabel",
			Handler:    _Focus_CreateLabel_Handler,
		},
		{
			MethodName: "listLabels",
			Handler:    _Focus_ListLabels_Handler,
		},
		{
			MethodName: "updateLabel",
			Handler:    _Focus_UpdateLabel_Handler,
		},
		{
			MethodName: "deleteLabel",
			Handler:    _Focus_DeleteLabel_Handler,
		},
		{
			MethodName: "listChallenges",
			Handler:    _Focus_ListChallenges_Handler,
		},
		{
			MethodName: "getChallenge",
			Handler:    _Focus_GetChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "focus_v1alpha1.proto",
}
